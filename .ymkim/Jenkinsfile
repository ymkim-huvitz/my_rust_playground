pipeline {
    agent {
        label "moon_build_ubuntu || sun64"
    }
    environment {
        GOOGLE_CHAT_TOKEN = credentials('google-chat-token-ymkim')

        RUSTUP_HOME = "/opt/rust/rustup"
        PATH = "$PATH:/opt/rust/cargo/bin"

    }
    stages {
        stage('target: host') {
            steps {
                hangoutsNotify token: "$GOOGLE_CHAT_TOKEN",
                    message: "${env.BUILD_TIMESTAMP}\nSTART [${env.NODE_NAME}]",
                    threadByJob: true

                echo "Building..."
                sh '''
                    cd hello_world 
                    cargo build --release
                '''
            }
        }
        stage('prepare cross compile workdir') {
            steps {
                sh """
                    mkdir -p /tmp/${env.BUILD_TAG}
                    cp -r . /tmp/${env.BUILD_TAG}
                """
            }
        }
        stage('target: windows') {
            steps {
                sh """
                    cd /tmp/${env.BUILD_TAG}
                    cd hello_world
                    cross build --release --target x86_64-pc-windows-gnu
                    cross build --release --target i686-pc-windows-gnu
                """
            }
        }
        stage('target: arm') {
            steps {
                sh """
                    cd /tmp/${env.BUILD_TAG}
                    cd hello_world
                    cross build --release --target armv7-unknown-linux-gnueabihf
                    cross build --release --target aarch64-unknown-linux-gnu
                """
            }
        }
        stage('target: linux') {
            steps {
                sh """
                    cd /tmp/${env.BUILD_TAG}
                    cd hello_world
                    cross build --release --target i686-unknown-linux-gnu
                    cross build --release --target x86_64-unknown-linux-gnu
                """
            }
        }
        stage('Archive') {
            when {
                expression { currentBuild.resultIsBetterOrEqualTo('SUCCESS') }
            }
            steps {
                echo "Archiving artifacts..."
                archiveArtifacts artifacts: '**/release/hello_world', fingerprint: true
                archiveArtifacts artifacts: "/tmp/${env.BUILD_TAG}/hello_world/**/x86_64-pc-windows-gnu/release/*.exe", fingerprint: true
            }
        }
        stage('clean workdir') {
            steps {
                sh """
                    rm -rf /tmp/${env.BUILD_TAG}
                """
            }
        }
    }
    post {
        always {
            echo "Google Chat Notification: ${currentBuild.currentResult}"
            hangoutsNotify token: "$GOOGLE_CHAT_TOKEN",
                message: "END [${currentBuild.currentResult}]",
                threadByJob: true
        }
    }
    options {
        buildDiscarder(logRotator(numToKeepStr: "5", artifactNumToKeepStr: "5" ))
    }
}
